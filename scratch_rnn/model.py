# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FWdjnJVjCc2CGQiR88eH2vKx-T7Umwq_
"""

import numpy as np

class RNN:
    def __init__(self, vocab_size, hidden_size=16, output_size=2):
        self.hidden_size = hidden_size
        self.vocab_size = vocab_size
        self.output_size = output_size

        self.U = np.random.uniform(-0.1, 0.1, (hidden_size, vocab_size))
        self.W = np.random.uniform(-0.1, 0.1, (hidden_size, hidden_size))
        self.V = np.random.uniform(-0.1, 0.1, (output_size, hidden_size))

    def forward(self, inputs):
        h = np.zeros((len(inputs), self.hidden_size))
        for t, x in enumerate(inputs):
            x_vec = np.zeros(self.vocab_size)
            x_vec[x] = 1
            h[t] = np.tanh(self.U @ x_vec + (self.W @ h[t-1] if t > 0 else 0))
        o = self.V @ h[-1]
        return self.softmax(o)

    def softmax(self, x):
        e = np.exp(x - np.max(x))
        return e / e.sum()

    def predict(self, inputs):
        output = self.forward(inputs)
        return np.argmax(output)

