# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FWdjnJVjCc2CGQiR88eH2vKx-T7Umwq_
"""

import torch
from torch.utils.data import DataLoader
import torch.nn as nn
import torch.optim as optim
from dataset import SentimentDataset
from model import RNNClassifier
import matplotlib.pyplot as plt

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

train_set = SentimentDataset(split="train")
test_set = SentimentDataset(split="test")

train_loader = DataLoader(train_set, batch_size=8, shuffle=True, collate_fn=lambda x: pad_batch(x))
test_loader = DataLoader(test_set, batch_size=8, collate_fn=lambda x: pad_batch(x))

model = RNNClassifier(vocab_size=len(train_set.vocab)).to(device)
loss_fn = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

train_losses = []
accuracies = []

def pad_batch(batch):
    from torch.nn.utils.rnn import pad_sequence
    inputs, labels = zip(*batch)
    padded = pad_sequence(inputs, batch_first=True)
    return padded.to(device), torch.stack(labels).to(device)

for epoch in range(10):
    model.train()
    total_loss = 0
    for inputs, labels in train_loader:
        outputs = model(inputs)
        loss = loss_fn(outputs, labels)
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        total_loss += loss.item()
    train_losses.append(total_loss / len(train_loader))

    # Evaluate
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in test_loader:
            outputs = model(inputs)
            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()
    accuracy = correct / total
    accuracies.append(accuracy)
    print(f"Epoch {epoch+1}, Loss: {train_losses[-1]:.4f}, Accuracy: {accuracy:.4f}")

# Kaydet
plt.figure()
plt.plot(train_losses)
plt.title("Kayıp (Loss)")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.savefig("../results/loss.png")

plt.figure()
plt.plot(accuracies)
plt.title("Doğruluk (Accuracy)")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.savefig("../results/accuracy.png")

